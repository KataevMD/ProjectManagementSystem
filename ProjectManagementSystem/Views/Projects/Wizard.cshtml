@model ProjectManagementSystem.Models.ProjectViewModel


<script>
    var currentTab = 0; // Current tab is set to be the first tab (0)
    showTab(currentTab); // Display the current tab

    function showTab(n) {
        // This function will display the specified tab of the form ...
        var x = document.getElementsByClassName("tab");
        x[n].style.display = "block";
        // ... and fix the Previous/Next buttons:
        if (n == 0) {
            document.getElementById("prevBtn").style.display = "none";
        } else {
            document.getElementById("prevBtn").style.display = "inline";
        }
        if (n == (x.length - 1)) {
            document.getElementById("nextBtn").innerHTML = "Submit";
        } else {
            document.getElementById("nextBtn").innerHTML = "Next";
        }
        // ... and run a function that displays the correct step indicator:
        fixStepIndicator(n)
    }

    function nextPrev(n) {
        // This function will figure out which tab to display
        var x = document.getElementsByClassName("tab");
        // Exit the function if any field in the current tab is invalid:
        if (n == 1 && !validateForm()) return false;
        // Hide the current tab:
        x[currentTab].style.display = "none";
        // Increase or decrease the current tab by 1:
        currentTab = currentTab + n;
        // if you have reached the end of the form... :
        if (currentTab >= x.length) {
            //...the form gets submitted:
            document.getElementById("CreateForm").submit();
            return false;
        }
        // Otherwise, display the correct tab:
        showTab(currentTab);
    }

    function validateForm() {
        // This function deals with validation of the form fields
        var x, y, i, valid = true;
        x = document.getElementsByClassName("tab");
        y = x[currentTab].getElementsByTagName("input");
        // A loop that checks every input field in the current tab:
        for (i = 0; i < y.length; i++) {
            // If a field is empty...
            if (y[i].value == "") {
                // add an "invalid" class to the field:
                y[i].className += " invalid";
                // and set the current valid status to false:
                valid = false;
            }
        }
        // If the valid status is true, mark the step as finished and valid:
        if (valid) {
            document.getElementsByClassName("step")[currentTab].className += " finish";
        }
        return valid; // return the valid status
    }

    function fixStepIndicator(n) {
        // This function removes the "active" class of all steps...
        var i, x = document.getElementsByClassName("step");
        for (i = 0; i < x.length; i++) {
            x[i].className = x[i].className.replace(" active", "");
        }
        //... and adds the "active" class to the current step:
        x[n].className += " active";
    }
</script>

<form id="CreateForm" asp-action="CreateNewProject">
    <h1>Create new project:</h1>
    <br />
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="tab">
        <h3>Step 1</h3>
        <div class="form-group">
            <label asp-for="@Model.Project.Title" class="control-label"></label>
            <input asp-for="@Model.Project.Title" class="form-control" required />
            <span asp-validation-for="@Model.Project.Title" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="@Model.Project.StartDate" class="control-label"></label>
            <input asp-for="@Model.Project.StartDate" type="date" class="form-control" required />
            <span asp-validation-for="@Model.Project.StartDate" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="@Model.Project.EndDate" class="control-label"></label>
            <input asp-for="@Model.Project.EndDate" type="date" class="form-control" required />
            <span asp-validation-for="@Model.Project.EndDate" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="@Model.Project.ProjectPriority" class="control-label"></label>
            <input asp-for="@Model.Project.ProjectPriority" class="form-control" required />
            <span asp-validation-for="@Model.Project.ProjectPriority" class="text-danger"></span>
        </div>
    </div>

    <div class="tab">
        <h3>Step 2</h3>
        <div class="form-group">
            <label asp-for="@Model.Project.TitleCustomersCompany" class="control-label"></label>
            <input asp-for="@Model.Project.TitleCustomersCompany" class="form-control" required />
            <span asp-validation-for="@Model.Project.TitleCustomersCompany" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="@Model.Project.TitleContractorsCompany" class="control-label"></label>
            <input asp-for="@Model.Project.TitleContractorsCompany" class="form-control" />
            <span asp-validation-for="@Model.Project.TitleContractorsCompany" class="text-danger" ></span>
        </div>
    </div>
    <div class="tab">
        <h3>Step 3</h3>
        <div class="form-group">
            <label asp-for="ProjectManagers" class="control-label"></label>
            <select class="form-control" name="ProjectManagers" asp-items="@Model.ProjectManagers" required></select>
        </div>

    </div>
    <div class="tab">
        <h3>Step 4</h3>
        <div class="form-group">
            <label asp-for="Developers" class="control-label"></label>
            <select asp-for="Developers" class="form-control" asp-items="@Model.Developers" required></select>
        </div>

    </div>
    <div class="tab">
        <h3>Step 5</h3>
        <h4>Select document project</h4>
        <div class="form-group">
            <input class="form-control form-control-lg" id="formFileLg" name="Uploader" type="file" required />
        </div>

    </div>
    <br />
    <div style="overflow:auto;">
        <div style="float:right;">
            <button type="button" id="prevBtn" class="btn btn-outline-primary" onclick="nextPrev(-1)">Previous</button>
            <button type="button" id="nextBtn" class="btn btn-outline-secondary" onclick="nextPrev(1)">Next</button>
        </div>
    </div>

    <!-- Circles which indicates the steps of the form: -->
    <div style="text-align:center;margin-top:40px;">
        <span class="step"></span>
        <span class="step"></span>
        <span class="step"></span>
        <span class="step"></span>
        <span class="step"></span>
    </div>

</form>





<style>
    /* Style the form */
    #CreateForm {
        background-color: #ffffff;
        margin: 100px auto;
        padding: 40px;
        width: 70%;
        min-width: 300px;
    }

    /* Style the input fields */
    input {
        padding: 10px;
        width: 100%;
        font-size: 17px;
        font-family: Raleway;
        border: 1px solid #aaaaaa;
    }

        /* Mark input boxes that gets an error on validation: */
        input.invalid {
            background-color: #ffdddd;
        }

    /* Hide all steps by default: */
    .tab {
        display: none;
    }

    /* Make circles that indicate the steps of the form: */
    .step {
        height: 15px;
        width: 15px;
        margin: 0 2px;
        background-color: #bbbbbb;
        border: none;
        border-radius: 50%;
        display: inline-block;
        opacity: 0.5;
    }

        /* Mark the active step: */
        .step.active {
            opacity: 1;
        }

        /* Mark the steps that are finished and valid: */
        .step.finish {
            background-color: #4CAF50;
        }
</style>
